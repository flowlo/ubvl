%{
#ifndef CODE_BFE
#define CODE_BFE
#include <stdio.h>
#include <stdlib.h>
#include <assert.h>
#include "ast.h"
#include "glue.h"
#endif

/*
bterm:	bool			# 0 #
bterm:	O_NOT(bterm)		# 0 #
bterm:	O_NEQ(expr, expr)	# 0 #
bterm:	O_LT(expr, expr)	# 0 #
*/
%}

%start stat
%term O_NEQ=0 O_LT=1 O_ADD=2 O_MUL=3 O_SUB=4 O_ID=5 O_NUM=6 O_RETURN=7 O_ASSIGN=8 O_IF=9 O_WHILE=10 O_STATS=11 O_ELSE=12 O_ARRAY=13 O_OR=14 O_NOT=15 O_ARG=16

%%
stat:	ret			# 0 #

ret:	O_RETURN(imm)		# 0 # printi("movq $%li, %%rax", bnode->left->value);
ret:	O_RETURN(expr)		# 1 # printi("movq %%%s, %%rax", bnode->left->reg);

expr:	imm			# 0 #
expr:	O_ADD(term, expr)	# 1 # bnode->reg = binary("addq", bnode->left->reg, bnode->right->reg, true);
expr:	O_SUB(term, expr)	# 1 # bnode->reg = binary("subq", bnode->left->reg, bnode->right->reg, false);
expr:	O_MUL(term, expr)	# 1 # bnode->reg = binary("imulq", bnode->left->reg, bnode->right->reg, true);

term:	imm			# 1 # printi("movq $%i, %%%s", bnode->value, bnode->reg = reg_new());
term:	O_ID			# 0 #

imm:	O_NUM			# 0 #
imm:	O_ADD(imm, imm)		# 0 # bnode->value = bnode->left->value + bnode->right->value;
imm:	O_SUB(imm, imm)		# 0 # bnode->value = bnode->left->value - bnode->right->value;
imm:	O_MUL(imm, imm)		# 0 # bnode->value = bnode->left->value * bnode->right->value;
imm:	O_LT(imm, imm)		# 0 # bnode->value = bnode->left->value < bnode->right->value;
imm:	O_NEQ(imm, imm)		# 0 # bnode->value = bnode->left->value != bnode->right->value;
