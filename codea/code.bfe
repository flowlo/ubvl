%{
#ifndef CODE_BFE
#define CODE_BFE
#pragma GCC diagnostic ignored "-Wformat"
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <assert.h>
#include "ast.h"
#include "glue.h"
#endif
%}

%start stat
%term O_NEQ=0 O_LT=1 O_ADD=2 O_MUL=3 O_SUB=4 O_ID=5 O_NUM=6 O_RETURN=7 O_ASSIGN=8 O_IF=9 O_WHILE=10 O_STATS=11 O_ELSE=12 O_ARRAY=13 O_OR=14 O_NOT=15 O_ARG=16 O_VARDEF=17

%%
stat:	ret			# 0 # printi("ret");

ret:	O_RETURN(imm)		# 0 # printi("movq $%li, %%rax", bnode->left->value);
ret:	O_RETURN(expr)		# 1 # if (strcmp(bnode->left->reg, "rax") != 0) { printi("movq %%%s, %%rax", bnode->left->reg); }

expr:	imm			# 1 # printi("movq $%i, %%%s", bnode->value, bnode->reg = reg_new_var());
expr:	O_ID			# 0
expr:	O_ADD(term, expr)	# 1 # bnode->reg = binary("addq", bnode->left->reg, bnode->right->reg, true);
expr:	O_SUB(term, expr)	# 1 # bnode->reg = binary("subq", bnode->left->reg, bnode->right->reg, false);
expr:	O_MUL(term, expr)	# 1 # bnode->reg = binary("imulq", bnode->left->reg, bnode->right->reg, true);
expr:	array			# 0 # printi("movq (%%%s), %%%s", bnode->reg, bnode->reg);

array:	O_ARRAY(O_ID, expr)	# 3 # bnode->reg = reg_new_var(); printi("leaq (%%%s,%%%s,8), %%%s", bnode->left->reg, bnode->right->reg, bnode->reg);
array:	O_ARRAY(array, imm)	# 2 # bnode->reg = bnode->left->reg; printi("movq (%%%s), %%%s", bnode->reg, bnode->reg); printi("leaq %li (%%%s), %%%s", bnode->right->value * 8, bnode->left->reg, bnode->reg); 
array:	O_ARRAY(array, expr)	# 3 # bnode->reg = bnode->left->reg; printi("movq (%%%s), %%%s", bnode->reg, bnode->reg); printi("leaq (%%%s,%%%s,8), %%%s", bnode->left->reg, bnode->right->reg, bnode->reg); 

term:	imm			# 1 # printi("movq $%i, %%%s", bnode->value, bnode->reg = reg_new_var());
term:	O_ID			# 0
term:	expr			# 0

imm:	O_NUM			# 0
imm:	O_ADD(imm, imm)		# 0 # bnode->value = bnode->left->value + bnode->right->value;
imm:	O_SUB(imm, imm)		# 0 # bnode->value = bnode->left->value - bnode->right->value;
imm:	O_MUL(imm, imm)		# 0 # bnode->value = bnode->left->value * bnode->right->value;
imm:	O_LT(imm, imm)		# 0 # bnode->value = bnode->left->value < bnode->right->value;
imm:	O_NEQ(imm, imm)		# 0 # bnode->value = bnode->left->value != bnode->right->value;
